package Chap18.Ex01;

/* 1. 자바는 객체지향프로그램(OOP) : 모든 함수(메소드)는 객체 내부에 존재해야 한다. 
 * 
		람다식		 	    . 자바에서 함수형 프로그래밍이 가능하도록 지원해주는 하나의 기능
							. 기본에 구현된 메소드를 재정의 하는 것이 아니라 구현부가 없는 메소드에 람다식으로 기능을 부여해서 작동시키는 문법
							. 가능한한 축약된 문법을 사용. ( 생략 가능한 부분은 최대한 생략 ) - 간략
							. 자바에서 내부적으로 익명 클래스로 변환되어 처리됨
							. 인터페이스에서 익명 클래스로 변환이 가능
							. 함수형 인터페이스의 구현된 익명클래스를 람다식으로 축약 
		함수형 인터페이스 		: 인터페이스에 단 한개의 추상클래스가 정의된 인터페이스
*/

@FunctionalInterface		//@FunctionalInterface : 함수형 인터페이스 선언,, 추상 메소드가 1개만 있어야 함
interface AA {			//함수형 인터페이스
	void abc();			//public abstract 생략됨
}

//  < 인터페이스의 정의된 메소드를 구현하는 방법 >

// 1. 인터페이스의 메소드를 구현하는 클래스 생성
class BB implements AA{
	@Override
	public void abc() {
		System.out.println("메소드 내용 1");
	}
}


public class OOP_VS_FP {

	public static void main(String[] args) {

//		< 객체 지향 프로그래밍 문법 >
//		. 자바는 객체지향 프로그램이므로 모든 함수(메소드)는 클래스 내부에 있고,
//		  객체를 생성해야 호출 가능함 = 객체 생성 없이 함수명으로 바로 호출 불가능 
		
//		1. class 생성하여 사용
//		. 모든 메소드는 객체 내부에 존재하며 객체를 생성후 호출 가능
		AA a1 = new BB();
		a1.abc();
		
//		2. 익명 이너 클래스를 생성해서 사용
//		인터페이스의 추상메소드를 직접 구현한 클래스를 생성하지 않고 익명 이너 클래스 사용
		AA a2 = new AA() {
			@Override
			public void abc() {
				System.out.println("메소드 내용 2");
			}
		};		
		a2.abc(); 		// OOP 에서는 객체 생성후 메소드 호출
		
//		3. 람다식(함수적) 프로그래밍 문법 (람다식) 
//		  단, 람다식에 사용되는 인터페이스는 함수형인터페이스여야 한다. @FunctionalInterface
		AA a3 = () -> {System.out.println("메소드 내용 3");};	// 람다식 표현
		a3.abc();
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}

}
